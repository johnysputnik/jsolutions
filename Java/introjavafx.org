#+TITLE: Getting started with JavaFX

* Introduction

  This is set of notes for a quick start for JavaFX, using an MVVM
  pattern to create the simplest of apps.

* The View Model

  The view model holds the code for UI behaviour, so that all the view
  needs to be is presentation layout and bindings. The view model is
  as follows:

#+BEGIN_SRC java +n -r
  package sample;

  import javafx.beans.property.ReadOnlyStringProperty;
  import javafx.beans.property.SimpleStringProperty;
  import javafx.beans.property.StringProperty;

  public class SampleViewModel {

          private final StringProperty textValue = new SimpleStringProperty();

          public StringProperty textValueProperty() {
                  return textValue;
          }

          public ReadOnlyStringProperty echoTextValueProperty(){
                  return textValue;
          }

          public void clearText() {
                  textValue.setValue("");
          }
  }
#+END_SRC

* The View

  The view then has to be defined in 2 files.

  The first file is the Controller class that defines the fields and
  the bindings to the View Model. Ideally the View Model would be
  injected in a constructor or via some other property.

#+BEGIN_SRC java +n -r
  package sample;

  import javafx.event.ActionEvent;
  import javafx.fxml.FXML;
  import javafx.scene.control.Label;
  import javafx.scene.control.TextField;


  public class SampleView {

          SampleViewModel vm = new SampleViewModel();

          @FXML
          private TextField textField;

          @FXML
          private Label echoTextField;

          @FXML
          void initialize() {

                  textField.textProperty().bindBidirectional(vm.textValueProperty());
                  echoTextField.textProperty().bind(vm.echoTextValueProperty());
          }

          public void clearText(ActionEvent actionEvent) {
                  vm.clearText();
          }
  }
#+END_SRC

  The layout of the view is then defined in a FXML file:

#+BEGIN_SRC xml +n -r
  <?xml version="1.0" encoding="UTF-8"?>

  <?import javafx.scene.control.TextField?>
  <?import javafx.scene.layout.*?>

  <?import javafx.scene.control.Button?>
  <?import javafx.scene.control.Label?>
  <GridPane xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/8"
            alignment="center" hgap="10" vgap="10" fx:controller="sample.SampleView">
     <children>
        <TextField GridPane.rowIndex="0" fx:id="textField" />
        <Label GridPane.rowIndex="1" fx:id="echoTextField"/>
        <Button GridPane.rowIndex="2" fx:id="clearButton" onAction="#clearText">Clear</Button>
     </children>
     <columnConstraints>
        <ColumnConstraints />
     </columnConstraints>
     <rowConstraints>
        <RowConstraints />
        <RowConstraints />
     </rowConstraints>
  </GridPane>
#+END_SRC

  This references the code behind class and properties. Ideally it
  would be good if these two files could be merged a bit more and the
  bindings could be set in the FXML itself.

* Main
  
  The main function is then defined as follows:

#+BEGIN_SRC java +n -r
  package sample;

  import javafx.application.Application;
  import javafx.fxml.FXMLLoader;
  import javafx.scene.Parent;
  import javafx.scene.Scene;
  import javafx.stage.Stage;

  public class Main extends Application {

          @Override
          public void start(Stage primaryStage) throws Exception{
                  Parent root = FXMLLoader.load(getClass().getResource("SampleView.fxml"));
                  primaryStage.setTitle("Hello World");
                  primaryStage.setScene(new Scene(root, 300, 275));
                  primaryStage.show();
          }


          public static void main(String[] args) {
                  launch(args);
          }
  }
#+END_SRC

 
