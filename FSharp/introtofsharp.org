#+TITLE: An Introduction to Microsoft F#

A great introduction to F# for those who have not started looking at
it can be found [[http://channel9.msdn.com/blogs/pdc2008/tl11][here]]. Luca Bolognese does a fantastic job of
introducing it. I have put together some quick notes if you are
looking for quick notes :) I would recommend watching the
presentation.

* Introduction

  We are used to the Imperative way of thinking;  telling the machine
  how to do something not what to do, for example:

#+BEGIN_SRC c +r -r
  x=x+1
#+END_SRC

  Makes sense to a programmer but would make no sense to a mathematician.

  3 keywords/operators of high importance that are introduced in this
  presenatation are:

  let - This does not mean assign a value to var, instead, bind
  something to a symbol (something could be a value, list, function)
  the symbol is then immutable although can be made mutable with a
  mutable keyword.

  |> pipeline - like pipelines in command shells

  fun  - A way to define a function on the spot (like lambda
  expression)

* A sum of squares example

  imperative:

#+BEGIN_SRC f# +n -r
let sqr x = x * x
let sumofsquares nums =  
   let mutable acc = 0
   for x in nums do
      acc <- acc + sqr x  // assignment, rather than binding
   acc
#+END_SRC

  functional 1, as a mathematician might write it:

#+BEGIN_SRC f# +n -r
let sqr x = x * x
let sumofsquares nums =  
   match nums with // branching
   | [] -> 0.0 // empty list
   | h::t -> sqr h + sumOfSquares t
Not much benefit to this
#+END_SRC

   With pipelines:

#+BEGIN_SRC f# +n -r
let sqr x = x * x
let sumofsquares nums =  
   nums
   |> Seq.map sqr
   |> Seq.sum // can be parallelized
Here there is less chances for error as Luca explains.
#+END_SRC

* A larger example

  Luca then demostrated a data analysis example for stock market data.

#+BEGIN_SRC f# +n -r
let csv = reader.ReadToEnd()
let prices =
   csv.Split([|'\'|])
   |> Seq.skip 1
   |> Seq.map (fun line -> line.Split([|','|]))
   |> Seq.filter (fun values -> values |> Seq.length = 7)
   |> Seq.map (fun values ->
       System.Date.Parse(values.[0]),
       float values.[6])
#+END_SRC

  He also demonstrates some visualisation, exposing the code better to
  .NET, parallelising and asynchronous activity using async keyword
  and let! operator and Async versions of methods - No need for
  delegates.

  The section on async and parallel was REALLY neat and shows off the
  simplicity of F# for writing parallelized data analysis for example.
