#+TITLE: Problems with Individual Work Queues


How well are you working as a team? You might be producing some great software
together, but does that mean there is no room for improvement? One of the key
agile practices is that of inspecting and adapting: Looking for improvements
that can increase our effectiveness in delivering value to our end users.

Recently, I was working with a team that was delievering real value to its
users, helping them reach positive outcomes in situations constrained by the
realities of limited knowledge and limited budget.
The team was enabling them to do their jobs and had a fantastic understanding of
the customer needs through a great Product Owner.

However, there is always opportunity for improvement that can help the team grow
in its understanding and effectiveness. This team was no different and some
strange behaviour around the flow of tasks in a sprint had started to emerge.
This post outlines what was going on and the challenges the team needed to face.
I'm sure this is a common issue for many teams, especially distributed teams.

* What happened

  Like many teams, this team used JIRA to manage both the product backlog and the
  sprint backlog. The team was having its daily scrum towards the end of the
  sprint and it was clear that a single task in the sprint backlog was blocking a
  lot of other activity.
  
  The person who was assigned it in JIRA appeared to know nothing about the
  task, depsite it being in progress, and assumed that another team member was
  looking at it.
  
  This other person was indeed the accepted 'owner' of the task as they had been
  assigned it in sprint planning. This was the normal practice for this team: To
  assign all tasks to individuals within sprint planning.
  
  The owner had chosen to assign it to the person who was now responsible for it
  but this had not been communicated. Several people on the team also questioned
  whether it should have even been assigned to that person as it should have
  stayed as assigned to the 'owner' until complete as it was agreed in sprint
  planning that it was their responsibility to see it to 'Done'.

  The team believed that it was the team's responsibility to deliver the sprint
  goal, through the sprint backlog, but that it needed to stay assigned to the
  owner to calculate individual velocity to assist with planning and forecasting.
  In planning each individual needed to know their individual task list in order
  to commit to the sprint.

* My hypotheses

  The team, including the Scrum Master for the team did not see any need to
  change as they felt it had worked up until
  now, despite the team rarely delivering the whole sprint. I was not going to
  push a team to look at this should it choose not to, but I was keen to do a
  bit of analysis myself to see how I could best hold a mirror up to them in
  order to see things for themselves.

  These were some of my hypotheses:

** A desire for predictability due to continual overcommitment
   
   "What you can't measure you can't manage" - it's a very common phrase.
   
   The scrum master may want a better measure of predictability in order to
   forecast and plan. As with most people on any team, he wanted to know that
   value was being created and he wanted to do his job well. He equated doing
   the job well with controlling the delivery - he was more a delivery manager
   than a scrum master.

   However, this predictability was proving difficult, if not impossible to
   attain and the desire to get a more fine grained measure in order to control
   the delivery of value better was causing problems.

   The desire for predictability, at least in terms of velocity and forecasting,
   could be futile in this team as knowledge is changing between each planning
   session. Forecasting only really works when what we understand now is of
   greater value than what we could learn through the delivery. This is not
   usually the case with projects requiring an agile approach.

   *Challenge: What are the side effects of measuring the team's effectiveness
   the way you currently are? There may be positive as well as negative side
   effects.*

** The team is not truly being allowed to self organise

   During the sprint planning, there was a clear attitude from the team of "I
   think I'll get all my tasks done this sprint". The team, while delivering
   value to the users, was often not working as a team. Commitment was very much
   on an individual basis, rather than as a whole team. Commitment was also to
   the product owner and scrum master rather than to each other.

   The team were involved with assigning tasks at sprint planning, but self
   organisation to deliver a shared goal - even a shared sprint - was not being
   used to any significant degree. The team were working as individuals a lot of the time
   and had a reasonable degree of effectiveness. Imagine how more effective they
   could be if true team self organisation was allowed to flourish?

   When the team explicitly swarmed around specific problems or a set of problems
   for a day as it sometimes did, everyone remarked how effective it was and
   that these sessions were the most enjoyable as a team.

   *Challenge: How can you as a team increase your effectiveness by applying the
   principle of self oprganisation?*

** A lack of understanding of basic queue theory and demand based tasking

   Basic queue theory shows that for variable work, which is the case for most
   software development, a single shared queue with multiple workers is the most
   efficient. Just look at the ticketing system in place in many UK post
   offices. Multiple queues, while giving the apperance of maximising the use of
   the team's capacity, usually fails to do so.

   The queues are also currently constrained by the upstream process. This is
   forecast based scheduling and fails as we have uncertainty and task
   variability and need to adapt to that. By using demand based scheduling, with
   team members pulling from a single queue, the downstream process constrains
   the queue and flow of work can be better optimised.

   *Challenge: How can we better optimise the flow of our work items?*

* Summary

  It's sometimes difficult for a team producing high value to see where it is
  creating waste. Sometimes teams adapt to behaviour that is potentially
  negative and deliver despite the odds - A clear vision and empathy with the
  users goes a long way to overcome them.

  Although understanding of some basic principles can help, self organisation is 
  critical to becoming more effective and the control from management
  needs to be relinquished somewhat for this to happen.

  *Challenge: Where have you become accepting of or even oblivious to waste?*
