#+TITLE: Building Qt with VS2013

* Introduction

  In order to build Qt from source and contribute to the Qt
  development process, there are quite a few hoops that need to be
  jumped through. These notes outline the process I went through to
  get Qt building, under Windows with Visual Studio 2013 as the
  toolset. 

* Setting up Qt accounts

  The first place to go to is the [[https://wiki.qt.io/Qt_Contribution_Guidelines][Qt Contribution Guidelines]], where
  the whole process of contributing to Qt is outlined. This is a
  little outdated and at the time of writing the Qt login procedure is
  being changed.

  The first step though is to set up a Qt account at [[https://login.qt.io/register][this link]]. I
  recently received an email saying that all further login would be
  done through a single sign on based on these login credentials.

  However, at this stage, it still appears you need to create account
  on both the [[https://bugreports.qt.io/secure/Signup!default.jspa][bug reports site]] AND then log into[[http://codereview.qt-project.org/#settings,contact][ The Gerrit Code
  Review System]] to create details for that as well. Both of these
  account creation procedures involve as confirmation email.

  In order to contribute to Qt you will need to set up an SSL key for
  committing to the code review system. If you already use git, then
  this should probably be the key you use for git, and can be added to
  gerrit [[https://codereview.qt-project.org/#/settings/ssh-keys][here]].

  To get the public key for pasting into the web page, form a bash shell:

#+BEGIN_SRC sh
  cat ~/.ssh/id_rsa.pub
#+END_SRC

  Select and paste the whole string into the box to register this key.

  You should now be set up to contribute to the Qt development process.

* Getting source code

  The source code is kept in a git repository and should be cloned in
  a suitable location, preferably one on a fast local disk, as the
  build process can take a long time.

  To get the top level code:

#+BEGIN_SRC sh
  git clone git://code.qt.io/qt/qt5.git
#+END_SRC

  This is very quick, do not be fooled, the code has not really been
  pulled down yet!

  Now we need to check out the target branch.

  IMPORTANT - If you switch branches, you should go through the whole
  procedure again from here.

#+BEGIN_SRC sh
  cd qt5
  git checkout dev
#+END_SRC

  We should now check that we have all the dependencies for the build
  in place before proceeding further.

* Ensuring dependencies are in place

  In order to build, we need to ensure that we have:

  - Perl >= 5.14
  - Python >= 2.6.x

  These are the basic dependencies and depending upon ssl and webkit
  requirements, there might be more needed. Details of these can be
  found on the main [[https://wiki.qt.io/Building-Qt-5-from-Git][building from git]] page.

* Configuring the source code tree
  
  To configure the source code tree, I use the bash shell. The
  following commands should configure the the Qt source code for
  building and contributing:

#+BEGIN_SRC sh
  perl init-repository --codereview-username <gerrit username>
#+END_SRC

  I got an error from this command due to my default version of perl,
  part of the git distribution being out of date so had to use an
  absolute path to a later perl version in Program Files.

  This configures all the git submodules for Qt and checks out the
  code. This can take a while to check out, but we now have all the
  source ready to build.

* Building the source code

** Creating the environment script

   Before we build, we must create a script file called qt5vars.cmd
   containing the following:

#+BEGIN_SRC bat +n -r
  SET _ROOT=X:\dev\libs\qt5                                            (ref:edit)
  SET PATH=%_ROOT%\qtbase\bin;%_ROOT%\gnuwin32\bin;%PATH%
  REM Uncomment the below line when using a git checkout of the source repository
  REM SET PATH=%_ROOT%\qtrepotools\bin;%PATH%
  SET QMAKESPEC=win32-msvc2013
  SET _ROOT=
#+END_SRC

   this should be placed in the folder containing the qt5 source, at
   the top level. And the [[(edit)][_ROOT]] variable set to the correct location of
   the Qt source. 

   This can then be called from a command prompt before building the
   source.

** Configuring the build

   In order to configure the build without tests. examples and webkit,
   open a VS2014 64bit command prompt, navigate to the source folder,
   execute the qt5vars.cmd script above and then run the following
   command:

#+BEGIN_SRC bat
    configure -skip webkit -developer-build -opensource -nomake tests \
              -nomake examples -debug-and-release
#+END_SRC

   You will be asked to accept the opensource license terms.

   This will set up the build chain, makefiles etc for the build,
   which can then be executed with the following command:

#+BEGIN_SRC bat
   nmake
#+END_SRC
 
   Once the build process has finished, there will be both a debug and
   a release version of the Qt libraries in ./qtbase under the root
   source folder.

* Upgrading an old solution to use the new Qt build

** Missing DLLs

** Environment Variables

   In order to use the new version of Qt, firstly any environment
   variables set up should be changed to reflect the new path. The ones
   I had to change were:

   - QT5_X64DIR
   - QT5DIR
   - QTDIR

   These were all changed to the qtbase folder as mentioned in the
   previous section.

   Also if Qt5 DLLs are present on the PATH, then these may interfere
   with running applications using the new Qt build. 
  
   In order to preempt this I added %QT5_X64DIR%/bin to the PATH and
   made sure it took precedence.

** Qt Creator

   Building a project in Qt Creator should be as simple as opening the
   project as before, selecting the Projects icon on the right and
   adding a new kit using the Manage Kits button, based on the
   location of the Qt build.

   First, use the Qt Versions tab to add a new Qt version by selecting
   the qmake.exe in the bin folder, then switch to the Kits tab, in
   order to add a new kit based on the Qt Version by selecting the
   qtbase folder in the source folder and the correct Qt
   version. Ensure that it is named something sensible and close the
   dialog.

   Then select the Add Kit button and choose the kit created
   above. This then creates a build configuration based on the new
   version of Qt.

   Run qmake and build from the menu and run the application. No other
   changes should be necessary.


** Running qmake from command line

   qmake should now work from the command line. In my project we have
   a small batch script that runs qmake to generate Visual Studio
   projects. This needed no changing to generate the visual studio
   projects and created them with correct paths for include and lib
   settings as well as moc, uic and rcc execution.

   Building the project in visual studio 2013 worked as expected in
   both Release and Debug builds.

   Running the executable from Visual Studio needs no extra changes as
   qmake has ensured everything is updated.

