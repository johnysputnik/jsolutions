#+TITLE: Is Agile a Sham

* Introduction

  Recently a [[http://williamedwardscoder.tumblr.com/post/20054342100/agile-is-a-sham][blog article]] was posted by William Edwards, outlining
  quite harshly why he felt that agile, or should I say Agile, was not
  only a waste of time but not conducive to producing good
  software. There are a significant amount of responses to his post so
  I’d thought I’d put mine here.

* How Agile can Hinder

  A lot of theory for agile process methodology comes from
  manufacturing, especially kanban. They are all generally geared
  towards maximising throughput. But when the workers are people
  rather than machines there is a danger that the process becomes all
  about grinding out features at any cost. If this becomes the focus
  it is almost certainly going to lead to demoralisation and burn out.

  However, this is a symptom of a top down imposed agile process, where
  management hear the benefits of increased throughput and efficiency
  and presume it will solve problems of lack of productivity. Expecting
  this of any process is perhaps a bit shortsighted.

  Scrum, in particular, also has a focus on all team members being equal
  in role, and can design, develop and test with equal
  responsibility. There is an obvious danger in this which is
  highlighted in the post, that specific individual expertise may be
  lost amongst the levelling of skills in a team. Some even argue that
  scrum is a process for mediocre teams as there is no room for experts.

* How Agile can Help

  Having read the article, I am a little unclear on the alternative
  that the author is suggesting as he seems to imply that agile is
  always wrong and his way is always right, I am sure that is not
  exactly what he intended to imply. However, as some of the replies
  suggest, any process has to be geared around the
  project/individual/customer circumstances. If the environment is one
  where priorities and requirements are changing and timescales are
  short, then adopting an iterative framework like Scrum may be more
  appropriate than a model that encourages a lot of up front
  requirements gathering and design. Not all projects are like that
  and no process can be globally appropriate.

  I believe that Scrum can be said to have succeeded when one no longer
  needs a scrummaster and maybe even Scrum itself  is no longer
  followed. Just as deleting code is often more beneficial than writing
  code, removing process is often more beneficial than adding
  process. Scrum, like most other agile processes or frameworks
  encourages everyone, in particular the team to constantly inspect and
  adapt itself to do better, whatever ‘better’ may mean, which may not
  always be about just increasing throughput.

* Summary

  Team A is in a situation where it is delivering good software
  reliably to the customer, the business is making good margins on the
  product and the team enjoys working on it and generally all parties
  are happy,  it shouldn’d need to look for any process to adopt, the
  one it currently follows, even if only by implication obviously
  works perfectly.

  However, this is very rare indeed and in Team B there are problems
  with delivering reliable software, profit margins and developer
  satisfaction, something needs to be done and using a framework such
  as Scrum to encourage everyone to uncover problems, inspect
  processes and practices and adapt to improve the situation is a good
  thing.

  Ultimately Team B is aiming to be like the idealistic Team A and an
  agile approach may help this.

